openapi: '3.0.2'
info:
  title: 'Gamify Kanban Backend'
  version: '1.0'
  description:  'Restful API Doc for the backend service, contain **player**, **admin**, **skill**, **level**, **profession**... Our database is **mongoDB**'
servers:
  - url: https://localhost:3000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Player:
      description: A player is an employee
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: 林老師
        email:
          type: string
          example: mail@mail.com
        phone:
          type: string
          example: 0988213456
        password:
          type: string
          format: sha-256
        token:
          type: string
          format: sha-256
        profession:
           $ref: '#/components/schemas/Profession'
        level:
          type: integer
          default: 0
        experience:
          type: integer
          default: 0
        nextLevelExperience:
          type: integer
        createDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        team:
          $ref: '#/components/schemas/Team'
        isAdmin:
          type: boolean
          default: false
        isActive:
          type: boolean
          default: true
    Profession:
      description: different position about jobs
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          default: 新人
          example: 後端魔法師
    Kanban:
      description: task distribution board
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        stages:
          type: array
          items:
            type: string
          example: ['todo','doing','review','complete']
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Task:
      description: describe task detail and duedate, experience can earn
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        title:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "努力唸書"
        startDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        dueDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        bonus:
          type: integer
          example: 100
        experience:
          type: integer
          example: 100
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        comments:
          type: string
          example: "做得好！"
    Team:
      description: multi players has same goal will be a group
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "偉大的gamify團隊，立志完成偉大作品"
        leader:
          type: object
          $ref: '#/components/schemas/Player'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        monthlyScore:
          type: integer
          example: 999
    Guild:
      description: As department in company
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "偉大的工程師團隊，立志完成偉大作品"
        leader:
          type: object
          $ref: '#/components/schemas/Player'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        monthlyScore:
          type: integer
          example: 999
    Skill:
      description: player's skills
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "React.js"
        needed:
          type: string
          example: "使用readt.js獨立完成一個網頁畫面建置"
        experienceLearned:
          type: integer
    Label:
      description: Labels help you organize and follow your tasks
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          default: 警急任務
          example: 支線任務

paths:
  /players:
    get:
      tags:
        - "Player"
      summary: "Find users data and response with query format"
      description: "Find all users with query.condition and return data ask with query.content"
      operationId: "findPetsByStatus"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: conditionsFields
          description: pass an optional search string for looking up inventory
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
        - in: query
          name: contentFields
          description: column need to return
          schema:
            type: string
      responses:
        '200':
          description: results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error
    post:
      tags:
          - "Player"
      summary: Create new player
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: string
                  example: "test@mail.com"
                password:
                  type: string
                  example: "qwe123456"
      responses:
        '200':
          description: results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  token:
                    type: string
                    format: sha-256
                    description: token need to store for user indentify
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error

  /player/{id}:
    get:
      tags:
          - "Player"
      summary: "Get specific player data"
      description: "Return player data match query"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
        - in: query
          name: conditionsFields
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: failed
    patch:
      tags:
        - "Player"
      summary: "update player data"
      description: "updata player data send from request"
      operationId: ""
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      requestBody:
        description: data want to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '200':
          description: OK
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error
    delete:
      tags:
        - "Player"
      summary: Delete players data
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: deleted players id
                items:
                  type: string
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error

  /player/bulkDelete:
    post:
      tags:
        - "Player"
      summary: Delete players data
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: arrays of player id
              items:
                type: string
              example: ["2131230-13123-123132", "123123-123123-123123"]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: deleted players id
                items:
                  type: string
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error

  /player/login:
    post:
      tags:
        - "Player"
      summary: "player login and get token"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: string
                  example: "test@mail.com"
                password:
                  type: string
                  example: "qwe123456"
      responses:
        '200':
          description: OK
        '400':
          description: wrong request / invalid input
        '401':
          description: Unauthorized
        '404':
          description: not found
        '500':
          description: server error

  /admins:
    get:
      tags:
        - "Admin"
      summary: "取得所有管理員資料"
      description: "回傳所有使用者資料"
      operationId: ""
      responses:
        '200':
          description: OK
        '400':
          description: failed
        '404':
          description: not found
    post:
      tags:
          - "Admin"
      summary: 新增管理員
      responses:
        '200':
          description: OK
        '400':
          description: failed
    delete:
      tags:
        - "Admin"
      summary: 刪除管理員
      responses:
        '200':
          description: OK
        '400':
          description: failed
  /admin/:id:
    get:
      tags:
          - "Admin"
      summary: "取得特定管理員資料"
      description: ""
      operationId: ""
      responses:
        '200':
          description: OK
        '400':
          description: failed
    patch:
      tags:
        - "Admin"
      summary: "修改特定管理員資料"
      description: ""
      operationId: ""
      requestBody:
        description: 帳
        content:
            'application/json':
              examples:
                user:
                  summary: User Example
                  externalValue: 'http://foo.bar/examples/user-example.json'
      responses:
        '200':
          description: OK
        '400':
          description: failed
  /admin/login:
    post:
      tags:
        - "Admin"
      summary: "登入管理員"
      description: ""
      requestBody:
        description: 修改資料
        content:
            'application/json':
              examples:
                user:
                  summary: User Example
                  externalValue: 'http://foo.bar/examples/user-example.json'
      responses:
        '200':
          description: OK
        '400':
          description: failed
  /admin/logout:
    post:
      tags:
        - "Admin"
      summary: "登出管理員"
      description: ""
      requestBody:
        description: 修改資料
        content:
            'application/json':
              examples:
                user:
                  summary: User Example
                  externalValue: 'http://foo.bar/examples/user-example.json'
      responses:
        '200':
          description: OK
        '400':
          description: failed

tags:
  - name: Player
  - name: Admin
  - name: Kanban
  - name: Task
  - name: Profession
  - name: Team
  - name: Guild
  - name: Skill