openapi: "3.0.2"
info:
  title: "Gamify Kanban Backend"
  version: "1.0"
  description: "Restful API Doc for the backend service, contain **player**, **admin**, **skill**, **level**, **profession**... Our database is **mongoDB**"
servers:
  - url: https://localhost:3000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Player:
      description: A player is an employee
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: 林老師
        email:
          type: string
          example: mail@mail.com
        phone:
          type: string
          example: 0988213456
        password:
          type: string
          format: sha-256
        token:
          type: string
          format: sha-256
        profession:
          $ref: "#/components/schemas/Profession"
        level:
          type: integer
          default: 0
        experience:
          type: integer
          default: 0
        nextLevelExperience:
          type: integer
        createDate:
          type: string
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        team:
          $ref: "#/components/schemas/Team"
        isAdmin:
          type: boolean
          default: false
        isActive:
          type: boolean
          default: true
    Profession:
      description: different position about jobs
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          default: 新人
          example: 後端魔法師
    Kanban:
      description: task distribution board
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        stages:
          type: array
          items:
            type: string
          example: ["todo", "doing", "review", "complete"]
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        createData:
          type: string
        owner:
          $ref: "#/components/schemas/Player"
        members:
          items:
            $ref: "#/components/schemas/Kanban"
        isArchvie:
          type: boolean
        isDelete:
          type: boolean
    Task:
      description: describe task detail and duedate, experience can earn
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        title:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "努力唸書"
        startDate:
          type: string
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        dueDate:
          type: string
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        bonus:
          type: integer
          example: 100
        experience:
          type: integer
          example: 100
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/Player"
        comments:
          type: string
          example: "做得好！"
        stage:
          type: string
          example: id of stage
        isArchvie:
          type: boolean
        isDelete:
          type: boolean
    Team:
      description: multi players has same goal will be a group
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "偉大的gamify團隊，立志完成偉大作品"
        leader:
          type: object
          $ref: "#/components/schemas/Player"
        members:
          type: array
          items:
            $ref: "#/components/schemas/Player"
        monthlyScore:
          type: integer
          example: 999
    Guild:
      description: As department in company
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "考試100分"
        description:
          type: string
          example: "偉大的工程師團隊，立志完成偉大作品"
        leader:
          type: object
          $ref: "#/components/schemas/Player"
        members:
          type: array
          items:
            $ref: "#/components/schemas/Player"
        monthlyScore:
          type: integer
          example: 999
    Skill:
      description: player's skills
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "React.js"
        needed:
          type: string
          example: "使用react.js獨立完成一個網頁畫面建置"
        experienceLearned:
          type: integer
        parentSkillId:
          type: string
        childSkillsId:
          type: array
          items:
            type: string
    Label:
      description: Labels help you organize and follow your tasks
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          default: 緊急任務
          example: 支線任務
        color:
          type: string
          example: #1F1F1F1F

paths:
  /players:
    get:
      tags:
        - "Player"
      summary: "Find users data and response with query format"
      description: "Find all users with query.condition and return data ask with query.content"
      operationId: "findPetsByStatus"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: conditionsFields
          description: pass an optional search string for looking up inventory
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
        - in: query
          name: contentFields
          description: column need to return
          schema:
            type: string
      responses:
        "200":
          description: results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    post:
      tags:
        - "Player"
      summary: Create new player
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: string
                  example: "test@mail.com"
                password:
                  type: string
                  example: "qwe123456"
      responses:
        "200":
          description: results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  token:
                    type: string
                    format: sha-256
                    description: token need to store for user indentify
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /player/{id}:
    get:
      tags:
        - "Player"
      summary: "Get specific player data"
      description: "Return player data match query"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
        - in: query
          name: conditionsFields
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
      responses:
        "200":
          description: results matching criteria
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Player"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: user not found
        "500":
          description: server error
    patch:
      tags:
        - "Player"
      summary: "update player data"
      description: "updata player data send from request"
      operationId: ""
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      requestBody:
        description: data want to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
      responses:
        "200":
          description: update user:${id} success
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Player"
      summary: Delete players data
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: deleted players id
                items:
                  type: string
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /player/bulkDelete:
    post:
      tags:
        - "Player"
      summary: Delete players data
      description: this api must be transcition
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: arrays of player id
              items:
                type: string
                example: ["2131230-13123-123132", "123123-123123-123123"]
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: deleted players id
                items:
                  type: string
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /player/login:
    post:
      tags:
        - "Player"
      summary: "player login and get token"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: string
                  example: "test@mail.com"
                password:
                  type: string
                  example: "qwe123456"
      responses:
        "200":
          description: login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  token:
                    type: string
                    format: sha-256
                    description: token need to store for user indentify

        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /admins:
    get:
      tags:
        - "Admin"
      summary: "取得所有管理員資料"
      description: "回傳所有使用者資料"
      operationId: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    post:
      tags:
        - "Admin"
      summary: 新增管理員，傳入player id陣列
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: ids of players
                type: string
                example: 123123-123123-1323123
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
  /admin/:id:
    get:
      tags:
        - "Admin"
      summary: "取得特定管理員資料"
      description: ""
      operationId: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Player"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Admin"
      summary: 刪除管理員
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
  /admin/login:
    post:
      tags:
        - "Admin"
      summary: "登入管理員"
      description: ""
      requestBody:
        description: 修改資料
        content:
          application/json:
            schema:
              type: object
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: string
                  example: "test@mail.com"
                password:
                  type: string
                  example: "qwe123456"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
                  token:
                    type: string
                    example: "e4jdfj94jf94f-4fj49fj49fj94j"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
  /admin/logout:
    post:
      tags:
        - "Admin"
      summary: "登出管理員"
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  type: string
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /kanbans:
    post:
      tags:
        - "Kanban"
      summary: "新增kanban"
      requestBody:
        description: kanban名稱與成員id
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
              properties:
                name:
                  type: string
                members:
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Kanban"
      summary: "取得該使用者所加入的kanban id 與名稱"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
  /kanbans/{id}:
    patch:
      tags:
        - "Kanban"
      summary: "更新kanban設定"
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                stages:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Kanban'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Kanban"
      summary: "取得該使用者所加入的特定kanban"
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Kanban'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Kanban"
      summary: "刪除kanban"
      parameters:
        - in: path
          name: id
          required: true
          description: players id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /tasks:
    post:
      tags:
        - "Task"
      summary: "新增task"
      requestBody:
        description: task detail
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Task"
      summary: "取得該使用者所加入某kanban所有tasks"
      parameters:
        - in: query
          name: kabanId
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
  /tasks/{taskId}:
    patch:
      tags:
        - "Task"
      summary: "更新task設定"
      parameters:
        - in: path
          required: true
          name: taskId
          schema:
            type: string
          description: if no kanbanId, return all tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                stages:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Task'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Task"
      summary: "取得task"
      parameters:
        - in: path
          required: true
          name: taskId
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Task'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
    delete:
      tags:
        - "Task"
      summary: "刪除task"
      parameters:
        - in: path
          required: true
          name: taskId
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro

  /professions:
    post:
      tags:
        - "Profession"
      summary: "新增profession"
      requestBody:
        description: profession data
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Profession'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Profession"
      summary: "取得所有professio資料"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profession'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
  /professions/{id}:
    patch:
      tags:
        - "Profession"
      summary: "更新profession設定"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Profession'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Profession"
      summary: "取得特定profession資料"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Profession'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Profession"
      summary: "刪除profession"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /teams:
    post:
      tags:
        - "Team"
      summary: "新增team"
      requestBody:
        description: team data
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - leaderId
              $ref: '#/components/schemas/Team'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Team"
      summary: "get data of all teams these player belong or can see"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
  /teams/{id}:
    patch:
      tags:
        - "Team"
      summary: "update team setting"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Team'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Team"
      summary: "取得特定team資料"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Team'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Team"
      summary: "刪除team"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /guilds:
    post:
      tags:
        - "Guild"
      summary: "新增Guild"
      requestBody:
        description: Guild data
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - leaderId
              $ref: '#/components/schemas/Guild'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Guild"
      summary: "get data of all Guilds these player belong or can see"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guild'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
  /guilds/{id}:
    patch:
      tags:
        - "Guild"
      summary: "update Guild setting"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Guild'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Guild"
      summary: "取得特定Guild資料"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Guild'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Guild"
      summary: "刪除Guild"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

  /skills:
    post:
      tags:
        - "Skill"
      summary: "新增Skill"
      requestBody:
        description: Skill data
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - leaderId
              $ref: '#/components/schemas/Skill'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123123-123123-13123"
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Skill"
      summary: "get data of all Skills these player belong or can see"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server erro
  /Skills/{id}:
    patch:
      tags:
        - "Skill"
      summary: "update Skill setting"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Skill'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    get:
      tags:
        - "Skill"
      summary: "取得特定Skill資料"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Skill'
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error
    delete:
      tags:
        - "Skill"
      summary: "刪除Skill"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: if no kanbanId, return all tasks
      responses:
        "200":
          description: OK
        "400":
          description: wrong request / invalid input
        "401":
          description: Unauthorized
        "404":
          description: not found
        "500":
          description: server error

tags:
  - name: Player
  - name: Admin
  - name: Kanban
  - name: Task
  - name: Profession
  - name: Team
  - name: Guild
  - name: Skill
